import streamlit as st
import plotly.express as px
from datetime import datetime, timedelta
from utils.data_loader import load_properties, load_infrastructure
from utils.logger import setup_logger
from components.map_utils import create_mini_map
from utils.preprocess_data import preprocess_data

import numpy as np

logger = setup_logger(__name__)

def show_dashboard():
    """–†–µ–Ω–¥–µ—Ä –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
    st.markdown("---")
    
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        properties = load_properties()
        infrastructure = load_infrastructure()
        
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        properties = preprocess_data(properties)
        
        # –ë–ª–æ–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        render_search_block(properties)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        render_info_cards(properties)
        
        # –ú–∏–Ω–∏-–∫–∞—Ä—Ç–∞
        render_mini_map(properties, infrastructure)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ dashboard: {e}")
        st.exception(e)
        st.error("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def render_search_block(properties):
    """–ë–ª–æ–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
    with st.container():
        st.subheader("üîç –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        
        col1, col2, col3, col4 = st.columns([4, 2, 2, 1])
        
        with col1:
            # –ê–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            unique_addresses = properties['address'].unique().tolist()
            address = st.selectbox(
                "–ê–¥—Ä–µ—Å –∏–ª–∏ —Ä–∞–π–æ–Ω", 
                options=[""] + unique_addresses,
                index=0,
                key="search_address"
            )
        
        with col2:
            property_types = ["–í—Å–µ"] + properties['type'].unique().tolist()
            property_type = st.selectbox(
                "–¢–∏–ø –∂–∏–ª—å—è", 
                options=property_types,
                index=0,
                key="search_type"
            )
        
        with col3:
            room_options = ["–í—Å–µ"] + sorted(properties['num_rooms'].unique().tolist())
            rooms = st.selectbox(
                "–ö–æ–º–Ω–∞—Ç", 
                options=room_options,
                index=0,
                key="search_rooms"
            )
        
        with col4:
            st.markdown("<br>", unsafe_allow_html=True)
            if st.button("–ù–∞–π—Ç–∏", type="primary", key="search_btn"):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
                st.session_state.search_params = {
                    'address': address,
                    'type': property_type,
                    'rooms': rooms
                }
                st.session_state.page = "map"
                st.rerun()
    
    st.markdown("---")

def render_info_cards(properties):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""
    st.subheader("üìà –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ä–µ–¥–Ω–µ–π —Ü–µ–Ω—ã
        avg_price = properties['price_per_m2'].mean()
        
        # –†–∞—Å—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
        if 'date' in properties.columns:
            last_month = datetime.now() - timedelta(days=30)
            monthly_data = properties[properties['date'] >= last_month]
            if len(monthly_data) > 0:
                current_avg = monthly_data['price_per_m2'].mean()
                prev_avg = properties[properties['date'] < last_month]['price_per_m2'].mean()
                price_change = ((current_avg - prev_avg) / prev_avg) * 100
                delta_text = f"{price_change:.1f}% –∑–∞ –º–µ—Å—è—Ü"
            else:
                delta_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        else:
            delta_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        
        st.metric(
            label="–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ –≥–æ—Ä–æ–¥—É", 
            value=f"{avg_price:,.0f} —Ä—É–±./–º¬≤", 
            delta=delta_text
        )
        
        # –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω
        if 'date' in properties.columns:
            price_trend = properties.resample('ME', on='date')['price_per_m2'].mean().reset_index()
            fig = px.line(
                price_trend, 
                x='date', 
                y='price_per_m2',
                title='–î–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω –∑–∞ –º¬≤',
                labels={'date': '–î–∞—Ç–∞', 'price_per_m2': '–¶–µ–Ω–∞ –∑–∞ –º¬≤'}
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–î–∞–Ω–Ω—ã–µ –æ –¥–∏–Ω–∞–º–∏–∫–µ —Ü–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    with col2:
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–π–æ–Ω—ã (—Ç–æ–ø-5 –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π)
        st.subheader("üèôÔ∏è –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–π–æ–Ω—ã")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–π–æ–Ω –∏–∑ –∞–¥—Ä–µ—Å–∞ (–ø—Ä–∏–º–µ—Ä: "—É–ª. –õ–µ–Ω–∏–Ω–∞, –¥.10" -> "–õ–µ–Ω–∏–Ω–∞")
        properties['district'] = properties['address'].str.extract(r'—É–ª\. (\w+)')[0]
        district_stats = properties['district'].value_counts().nlargest(5)
        
        for district, count in district_stats.items():
            percentage = (count / len(properties)) * 100
            st.progress(
                percentage / 100, 
                text=f"{district}: {percentage:.1f}% –æ–±—ä—è–≤–ª–µ–Ω–∏–π"
            )
    
    with col3:
        # –ù–æ–≤–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞ (–º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å API –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
        st.subheader("üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏")
        
        news = get_market_news()  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
        
        for item in news:
            with st.expander(f"{item['date']}: {item['title']}"):
                st.write(item['content'])
                if st.button("–ü–æ–¥—Ä–æ–±–Ω–µ–µ ‚Üí", key=f"news_{item['id']}"):
                    st.session_state.news_detail = item
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    
    st.markdown("---")

def get_market_news():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π —Ä—ã–Ω–∫–∞ (–∑–∞–≥–ª—É—à–∫–∞)"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å API –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    return [
        {
            'id': 1,
            'date': '15.06.2023',
            'title': '–ò–ø–æ—Ç–µ—á–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ —Å–Ω–∏–∂–µ–Ω—ã',
            'content': '–¶–ë –†–§ —Å–Ω–∏–∑–∏–ª –∫–ª—é—á–µ–≤—É—é —Å—Ç–∞–≤–∫—É, —á—Ç–æ –ø—Ä–∏–≤–µ–ª–æ –∫ —Å–Ω–∏–∂–µ–Ω–∏—é –∏–ø–æ—Ç–µ—á–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫...'
        },
        {
            'id': 2,
            'date': '10.06.2023',
            'title': '–ù–æ–≤—ã–µ –ñ–ö –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ',
            'content': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ —Ç—Ä–µ—Ö –Ω–æ–≤—ã—Ö –∂–∏–ª—ã—Ö –∫–æ–º–ø–ª–µ–∫—Å–æ–≤...'
        }
    ]

def render_mini_map(properties, infrastructure):
    """–ú–∏–Ω–∏-–∫–∞—Ä—Ç–∞ —Å —Ç–µ–ø–ª–æ–≤—ã–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —Ü–µ–Ω"""
    st.subheader("üó∫Ô∏è –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Ü–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏-–∫–∞—Ä—Ç—É
    st.pydeck_chart(create_mini_map(properties, infrastructure))
    
    col1, col2 = st.columns([3, 1])
    with col2:
        if st.button("–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª–Ω–æ–π –∫–∞—Ä—Ç–µ", key="go_to_map", use_container_width=True):
            st.session_state.page = "map"
            st.rerun()
    
    st.markdown("---")